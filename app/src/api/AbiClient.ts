/** @generated by @calimero/abi-codegen â€” DO NOT EDIT. */

import { CalimeroApp, Context } from '@calimero-network/calimero-client';

// Generated types

export type AbiEvent =
  | { name: 'Inserted' }
  | { name: 'Updated' }
  | { name: 'Removed' }
  | { name: 'Cleared' };

/**
 * Utility class for handling byte conversions in Calimero
 */
export class CalimeroBytes {
  private data: Uint8Array;

  constructor(input: string | number[] | Uint8Array) {
    if (typeof input === 'string') {
      // Hex string
      this.data = new Uint8Array(
        input.match(/.{1,2}/g)?.map((byte) => parseInt(byte, 16)) || [],
      );
    } else if (Array.isArray(input)) {
      // Number array
      this.data = new Uint8Array(input);
    } else {
      // Uint8Array
      this.data = input;
    }
  }

  toArray(): number[] {
    return Array.from(this.data);
  }

  toUint8Array(): Uint8Array {
    return this.data;
  }

  static fromHex(hex: string): CalimeroBytes {
    return new CalimeroBytes(hex);
  }

  static fromArray(arr: number[]): CalimeroBytes {
    return new CalimeroBytes(arr);
  }

  static fromUint8Array(bytes: Uint8Array): CalimeroBytes {
    return new CalimeroBytes(bytes);
  }
}

/**
 * Convert CalimeroBytes instances to arrays for WASM compatibility
 */
// eslint-disable-next-line @typescript-eslint/no-unused-vars
function convertCalimeroBytesForWasm(obj: any): any {
  if (obj === null || obj === undefined) {
    return obj;
  }

  if (obj instanceof CalimeroBytes) {
    return obj.toArray();
  }

  if (Array.isArray(obj)) {
    return obj.map((item) => convertCalimeroBytesForWasm(item));
  }

  if (typeof obj === 'object') {
    const result: any = {};
    for (const [key, value] of Object.entries(obj)) {
      result[key] = convertCalimeroBytesForWasm(value);
    }
    return result;
  }

  return obj;
}

/**
 * Convert arrays back to CalimeroBytes instances from WASM responses
 */
// eslint-disable-next-line @typescript-eslint/no-unused-vars
function _convertWasmResultToCalimeroBytes(obj: any): any {
  if (obj === null || obj === undefined) {
    return obj;
  }

  if (Array.isArray(obj) && obj.every((item) => typeof item === 'number')) {
    return new CalimeroBytes(obj);
  }

  if (Array.isArray(obj)) {
    return obj.map((item) => _convertWasmResultToCalimeroBytes(item));
  }

  if (typeof obj === 'object') {
    const result: any = {};
    for (const [key, value] of Object.entries(obj)) {
      result[key] = _convertWasmResultToCalimeroBytes(value);
    }
    return result;
  }

  return obj;
}

export class AbiClient {
  private app: CalimeroApp;
  private context: Context;

  constructor(app: CalimeroApp, context: Context) {
    this.app = app;
    this.context = context;
  }

  /**
   * init
   */
  public async init(): Promise<void> {
    const response = await this.app.execute(this.context, 'init', {});
    if (response.success) {
      return response.result as void;
    } else {
      throw new Error(response.error || 'Execution failed');
    }
  }

  /**
   * set
   */
  public async set(params: { key: string; value: string }): Promise<void> {
    const response = await this.app.execute(this.context, 'set', params);
    if (response.success) {
      return response.result as void;
    } else {
      throw new Error(response.error || 'Execution failed');
    }
  }

  /**
   * entries
   */
  public async entries(): Promise<Record<string, string>> {
    const response = await this.app.execute(this.context, 'entries', {});
    if (response.success) {
      return response.result as Record<string, string>;
    } else {
      throw new Error(response.error || 'Execution failed');
    }
  }

  /**
   * len
   */
  public async len(): Promise<number> {
    const response = await this.app.execute(this.context, 'len', {});
    if (response.success) {
      return response.result as number;
    } else {
      throw new Error(response.error || 'Execution failed');
    }
  }

  /**
   * get
   */
  public async get(params: { key: string }): Promise<string> {
    const response = await this.app.execute(this.context, 'get', params);
    if (response.success) {
      return response.result as string;
    } else {
      throw new Error(response.error || 'Execution failed');
    }
  }

  /**
   * get_unchecked
   */
  public async getUnchecked(params: { key: string }): Promise<string> {
    const response = await this.app.execute(
      this.context,
      'get_unchecked',
      params,
    );
    if (response.success) {
      return response.result as string;
    } else {
      throw new Error(response.error || 'Execution failed');
    }
  }

  /**
   * get_result
   */
  public async getResult(params: { key: string }): Promise<string> {
    const response = await this.app.execute(this.context, 'get_result', params);
    if (response.success) {
      return response.result as string;
    } else {
      throw new Error(response.error || 'Execution failed');
    }
  }

  /**
   * remove
   */
  public async remove(params: { key: string }): Promise<string> {
    const response = await this.app.execute(this.context, 'remove', params);
    if (response.success) {
      return response.result as string;
    } else {
      throw new Error(response.error || 'Execution failed');
    }
  }

  /**
   * clear
   */
  public async clear(): Promise<void> {
    const response = await this.app.execute(this.context, 'clear', {});
    if (response.success) {
      return response.result as void;
    } else {
      throw new Error(response.error || 'Execution failed');
    }
  }
}
